Body.       Body ::= [TopDecl] ;

ZeroData.    TopDecl ::= "data" SimpleType
ManyData.    TopDecl ::= "data" SimpleType = [Constr]
Decls.       TopDecl ::= Decl

----??? terminator TopDecl ";";

(:[]).    [Decl] ::= Decl;
(:).      [Decl] ::= Decl ";" [Decl];

EmptyDecl.   Decl ::= "";                 --- empty declaration
Signature.   Decl ::= Var "::" Type       --- signature declaration
FunDecl.     Decl ::= FunLhs "=" Exp      --- function declaration

BType.       Type ::= BType
FunBType.    Type ::= BType "->" Type	    --- function type

AType.       BType ::= AType
AppAType.    BType ::= BType AType	    --- type application

GTyCon.      AType ::= GTyCon
TyVar.       AType ::= TyVar
TupleType.   AType ::= "(" Type "," [ManyType] ")"	    --- tuple type
ListType.    AType ::= "[" Type "]"	                    --- list type
ParenType.   AType ::= "(" Type ")"                     --- parenthesized constructor

QTyCon.      GTyCon ::= QTyCon
UnitCon.     GTyCon ::= "()"                            --- unit constructor
ListCon.     GTyCon ::= "[]"                            --- list constructor
FunCon.      GTyCon ::= "(->)"                          --- function constructor
TupleCon.    GTyCon ::= "(" Comma [ManyComma] ")"       --- tuple constructor

(:[]).       [ManyType] ::= Type;
(:).         [ManyType] ::= Type "," [ManyType];

SimpleType.  Simpletype	::=	TyCon TyVar1 … TyVark	    (k ≥ 0)

(:[]).    [Constr] ::= Constr
(:[]).    [Constr] ::= Constr "|" [Constr]

Con.      Constr ::= Con ATtype1 … ATypek	    --- arity con = k, k ≥ 0

VarFunLhs.   FunLhs ::= Var APat [APat]

QOpExp.      Exp ::= LExp QOp Exp     --- infix operator application
NegExp.      Exp ::= "-" Exp          --- prefix negation
LExp.        Exp ::= LExp


Lambda.      LExp ::= "\" [APat] "->" Exp	              --- lambda abstraction
Let.         LExp ::= "let" [Decls] "in" Exp	          --- let expression
If.          LExp ::= "if" Exp "then" Exp "else" Exp	  --- conditional
Case.        LExp ::= "case" Exp "of" "{" [Alt] "}"	    --- case expression
FExp.        LExp ::= FExp

FApp.        FExp	::= FExp AExp                         --- function application
AExp.        FExp	::= AExp

Var.         AExp ::= Var	                            --- variable
GCon.        AExp ::= GCon	                            --- general constructor
Literal      AExp ::= Literal
ParExp.      AExp ::= "(" Exp ")"	                      --- parenthesized expression
TupleExp.    AExp ::= "(" Exp "," [ManyExp] ")"	        --- tuple
ListExp.     AExp ::= "[" [ManyExp] "]"                 --- list

(:[]).       [ManyExp] ::= Exp
(:).         [ManyExp] ::= Exp "," [ManyExp]

(:[]).       [Alt] ::= Alt
(:).         [Alt] ::= Alt ";" [Alt]


Alt.         Alt ::= Pat "->" Exp
EmptyAlt.    Alt ::= ""                                 --- empty alternative


---- Patterns
APat.        Pat ::= APat
NegInteger.  Pat ::= "-" Integer
NegFloat.    Pat ::= "-" Float
GConPat.     Pat ::= GCon [APat]

(:[]).       [APat] ::= APat
(:).         [APat] ::= APat [APat]

Var.         APat ::= Var
GCon.        APat ::= GCon                              --- arity gcon = 0
Literal.     APat ::= Literal
WildCard.    APat ::= "_"
ParPat.      APat ::= "(" Pat ")"
TuplePat.    APat ::= "(" Pat "," [ManyPat] ")"	        --- tuple
ListPat.     APat ::= "[" [ManyPat] "]"                 --- list

(:[]).       [ManyPat] ::= Pat
(:).         [ManyPat] ::= Pat "," [ManyPat]

Con.         GCon ::= Con
Unit.        GCon ::= "()"
ListCon.     GCon ::= "[]"
TupleCon.    GCon ::= "(" Comma [ManyCommas] ")"

(:[]).       [ManyCommas] ::= Comma
(:).         [ManyCommas] ::= Comma [ManyCommas]
Comma.       Comma ::= ","

VarId.       Var ::= VarId             ---- variable
ConId.       Con ::= ConId             ---- constructor

---- ArithOp      Op ::= varop           ---- operator
