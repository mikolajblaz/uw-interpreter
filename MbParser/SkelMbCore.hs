module SkelMbCore where

-- Haskell module generated by the BNF converter

import AbsMbCore
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transVar :: Var -> Result
transVar x = case x of
  Var string -> failure x
transCon :: Con -> Result
transCon x = case x of
  Con string -> failure x
transBody :: Body -> Result
transBody x = case x of
  Body topdecls -> failure x
transTopDecl :: TopDecl -> Result
transTopDecl x = case x of
  DataDecl datadecl -> failure x
  Decl decl -> failure x
transDecl :: Decl -> Result
transDecl x = case x of
  Signature signature -> failure x
  VarDecl var exp -> failure x
transSignature :: Signature -> Result
transSignature x = case x of
  Sign var type_ -> failure x
transDataDecl :: DataDecl -> Result
transDataDecl x = case x of
  Data con constrs -> failure x
transConstr :: Constr -> Result
transConstr x = case x of
  DataCon con types -> failure x
transType :: Type -> Result
transType x = case x of
  FunType type_1 type_2 -> failure x
  TyCon con -> failure x
  TupleType type_ types -> failure x
  ListType type_ -> failure x
transAlt :: Alt -> Result
transAlt x = case x of
  Alt pat exp -> failure x
transExp :: Exp -> Result
transExp x = case x of
  Lambda signatures exp -> failure x
  Let decls exp -> failure x
  If exp1 exp2 exp3 -> failure x
  Case exp alts -> failure x
  FApp exp1 exp2 -> failure x
  VarExp var -> failure x
  ConExp con -> failure x
  LitExp literal -> failure x
  TupleExp exp exps -> failure x
  ListExp exps -> failure x
  OOr exp1 exp2 -> failure x
  OAnd exp1 exp2 -> failure x
  EOpE exp1 compop exp2 -> failure x
  OAdd exp1 exp2 -> failure x
  OSub exp1 exp2 -> failure x
  ONeg exp -> failure x
  OMul exp1 exp2 -> failure x
  ODiv exp1 exp2 -> failure x
transCompOp :: CompOp -> Result
transCompOp x = case x of
  OEq -> failure x
  ONeq -> failure x
  OLt -> failure x
  OLte -> failure x
  OGt -> failure x
  OGte -> failure x
transPat :: Pat -> Result
transPat x = case x of
  ConPat con pats -> failure x
  VarPat var -> failure x
  LitPat literal -> failure x
  WildCard -> failure x
  TuplePat pat pats -> failure x
  ListPat pats -> failure x
transLiteral :: Literal -> Result
transLiteral x = case x of
  IntLit integer -> failure x
  DoubleLit double -> failure x
  CharLit char -> failure x
  StringLit string -> failure x

