---- MB Language Context-Free Grammar ----

-- Author: Mikołaj Błaż

-- Based on Haskell grammar available in "The Haskell 98 Report"
-- (https://www.haskell.org/onlinereport/syntax-iso.html)


---- Top constructs ----

entrypoints Body ;

Body.        Body ::= [TopDecl] ;

DataDecl.    TopDecl ::= DataDecl ;
Decl.        TopDecl ::= Decl ;

terminator TopDecl ";" ;
separator Decl ";" ;

Signature.   Decl ::= Signature ;                       --- signature declaration
FunDecl.     Decl ::= Var [Pat1] "=" Exp ;              --- function declaration
TmpVarDecl.  Decl ::= Var "=" Exp ;
--PatDecl.     Decl ::= Pat "=" Exp ;                     --- pattern declaration

Sign.        Signature ::= Var "::" Type ;
separator nonempty Signature "," ;


---- Types ----

Data.        DataDecl ::= "data" Con "=" [Constr] ;
DataCon.     Constr ::= Con [Type2] ;

separator nonempty Constr "|" ;
separator Type2 "" ;


FunType.     Type ::= Type1 "->" Type ;                 --- function type

AppType.     Type1 ::= Type1 Type2 ;                    --- type application

GTyCon.      Type2 ::= GTyCon ;
TupleType.   Type2 ::= "(" Type "," [Type] ")" ;        --- tuple type
ListType.    Type2 ::= "[" Type "]" ;                   --- list type

coercions Type 2;
separator nonempty Type "," ;

SimpleTyCon. GTyCon ::= Con ;
UnitTyCon.   GTyCon ::= "()" ;                          --- unit constructor
ListTyCon.   GTyCon ::= "[]" ;                          --- list constructor
FunTyCon.    GTyCon ::= "(->)" ;                        --- function constructor
TupleTyCon.  GTyCon ::= "(" [Comma] ")" ;               --- tuple constructor



---- Expressions ----

Lambda.      Exp6 ::= "\\" [Signature] "." Exp "end" ;        --- lambda abstraction
Let.         Exp6 ::= "let" "{" [Decl] "}" "in" Exp "end" ;   --- let expression
If.          Exp6 ::= "if" Exp "then" Exp "else" Exp "end" ;  --- conditional
Case.        Exp6 ::= "case" Exp "of" "{" [Alt] "}" ;         --- case expression

FApp.        Exp7 ::= Exp7 Exp8 ;                       --- function application

VarExp.      Exp8 ::= Var ;                             --- variable
GConExp.     Exp8 ::= GCon ;                            --- general constructor
LitExp.      Exp8 ::= Literal ;
TupleExp.    Exp8 ::= "(" Exp "," [Exp] ")" ;           --- tuple
ListExp.     Exp8 ::= "[" [Exp] "]" ;                   --- list

Alt.         Alt ::= Pat "->" Exp ;

coercions Exp 8;
separator nonempty Exp "," ;
separator Alt ";" ;
separator nonempty Var "" ;



---- Operators ----
-- right-associative
OOr.         Exp1 ::= Exp2 "||" Exp1 ;
OAnd.        Exp2 ::= Exp3 "&&" Exp2 ;

-- non-associative
EOpE.        Exp3 ::= Exp4 CompOp Exp4 ;

-- left-associative
OAdd.        Exp4 ::= Exp4 "+" Exp5 ;
OSub.        Exp4 ::= Exp4 "-" Exp5 ;
ONeg.        Exp4 ::= "-" Exp5 ;

OMul.        Exp5 ::= Exp5 "*" Exp6 ;
ODiv.        Exp5 ::= Exp5 "/" Exp6 ;

-- comparison operators
OEq.         CompOp ::= "==" ;
ONeq.        CompOp ::= "/=" ;
OLt.         CompOp ::= "<" ;
OLte.        CompOp ::= "<=" ;
OGt.         CompOp ::= ">" ;
OGte.        CompOp ::= ">=" ;



---- Patterns ----

ManyGConPat. Pat ::= GCon [Pat1] ;                      --- arity gcon > 0

VarPat.      Pat1 ::= Var ;
ZeroGConPat. Pat1 ::= GCon ;                            --- arity gcon = 0
LitPat.      Pat1 ::= Literal ;
WildCard.    Pat1 ::= "_" ;
TuplePat.    Pat1 ::= "(" Pat "," [Pat] ")" ;           --- tuple
ListPat.     Pat1 ::= "[" [Pat] "]" ;                   --- list

coercions Pat 1;
separator nonempty Pat "," ;
separator nonempty Pat1 "" ;

SimpleCon.   GCon ::= Con ;
UnitCon.     GCon ::= "()" ;
ListCon.     GCon ::= "[]" ;
TupleCon.    GCon ::= "(" [Comma] ")" ;

Comma.       Comma ::= "," ;
separator nonempty Comma "" ;



---- Lexical syntax ----
token Var (lower ( letter | digit )* ) ;
token Con (upper ( letter | digit )* ) ;

IntLit.      Literal ::= Integer ;
DoubleLit.   Literal ::= Double ;
CharLit.     Literal ::= Char ;
StringLit.   Literal ::= String ;

---- Comments ----
comment "--" ;
