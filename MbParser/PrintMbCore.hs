{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module PrintMbCore where

-- pretty-printer generated by the BNF converter

import AbsMbCore
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)



instance Print Var where
  prt _ (Var i) = doc (showString ( i))
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])

instance Print Con where
  prt _ (Con i) = doc (showString ( i))



instance Print Body where
  prt i e = case e of
    Body topdecls -> prPrec i 0 (concatD [prt 0 topdecls])

instance Print TopDecl where
  prt i e = case e of
    DataDecl datadecl -> prPrec i 0 (concatD [prt 0 datadecl])
    Decl decl -> prPrec i 0 (concatD [prt 0 decl])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print Decl where
  prt i e = case e of
    Signature signature -> prPrec i 0 (concatD [prt 0 signature])
    VarDecl var exp -> prPrec i 0 (concatD [prt 0 var, doc (showString "="), prt 0 exp])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print Signature where
  prt i e = case e of
    Sign var type_ -> prPrec i 0 (concatD [prt 0 var, doc (showString "::"), prt 0 type_])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print DataDecl where
  prt i e = case e of
    Data con constrs -> prPrec i 0 (concatD [doc (showString "data"), prt 0 con, doc (showString "="), prt 0 constrs])

instance Print Constr where
  prt i e = case e of
    DataCon con types -> prPrec i 0 (concatD [prt 0 con, prt 1 types])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString "|"), prt 0 xs])
instance Print Type where
  prt i e = case e of
    FunType type_1 type_2 -> prPrec i 0 (concatD [prt 1 type_1, doc (showString "->"), prt 0 type_2])
    TyCon con -> prPrec i 1 (concatD [prt 0 con])
    TupleType type_ types -> prPrec i 1 (concatD [doc (showString "("), prt 0 type_, doc (showString ","), prt 0 types, doc (showString ")")])
    ListType type_ -> prPrec i 1 (concatD [doc (showString "["), prt 0 type_, doc (showString "]")])
  prtList 1 [] = (concatD [])
  prtList 1 (x:xs) = (concatD [prt 1 x, prt 1 xs])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Alt where
  prt i e = case e of
    Alt pat exp -> prPrec i 0 (concatD [prt 0 pat, doc (showString "->"), prt 0 exp])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print Exp where
  prt i e = case e of
    Lambda signatures exp -> prPrec i 6 (concatD [doc (showString "\\"), prt 0 signatures, doc (showString "."), prt 0 exp, doc (showString "end")])
    Let decls exp -> prPrec i 6 (concatD [doc (showString "let"), doc (showString "{"), prt 0 decls, doc (showString "}"), doc (showString "in"), prt 0 exp, doc (showString "end")])
    If exp1 exp2 exp3 -> prPrec i 6 (concatD [doc (showString "if"), prt 0 exp1, doc (showString "then"), prt 0 exp2, doc (showString "else"), prt 0 exp3, doc (showString "end")])
    Case exp alts -> prPrec i 6 (concatD [doc (showString "case"), prt 0 exp, doc (showString "of"), doc (showString "{"), prt 0 alts, doc (showString "}")])
    FApp exp1 exp2 -> prPrec i 7 (concatD [prt 7 exp1, prt 8 exp2])
    VarExp var -> prPrec i 8 (concatD [prt 0 var])
    ConExp con -> prPrec i 8 (concatD [prt 0 con])
    LitExp literal -> prPrec i 8 (concatD [prt 0 literal])
    TupleExp exp exps -> prPrec i 8 (concatD [doc (showString "("), prt 0 exp, doc (showString ","), prt 0 exps, doc (showString ")")])
    ListExp exps -> prPrec i 8 (concatD [doc (showString "["), prt 0 exps, doc (showString "]")])
    OOr exp1 exp2 -> prPrec i 1 (concatD [prt 2 exp1, doc (showString "||"), prt 1 exp2])
    OAnd exp1 exp2 -> prPrec i 2 (concatD [prt 3 exp1, doc (showString "&&"), prt 2 exp2])
    EOpE exp1 compop exp2 -> prPrec i 3 (concatD [prt 4 exp1, prt 0 compop, prt 4 exp2])
    OAdd exp1 exp2 -> prPrec i 4 (concatD [prt 4 exp1, doc (showString "+"), prt 5 exp2])
    OSub exp1 exp2 -> prPrec i 4 (concatD [prt 4 exp1, doc (showString "-"), prt 5 exp2])
    ONeg exp -> prPrec i 4 (concatD [doc (showString "-"), prt 5 exp])
    OMul exp1 exp2 -> prPrec i 5 (concatD [prt 5 exp1, doc (showString "*"), prt 6 exp2])
    ODiv exp1 exp2 -> prPrec i 5 (concatD [prt 5 exp1, doc (showString "/"), prt 6 exp2])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print CompOp where
  prt i e = case e of
    OEq -> prPrec i 0 (concatD [doc (showString "==")])
    ONeq -> prPrec i 0 (concatD [doc (showString "/=")])
    OLt -> prPrec i 0 (concatD [doc (showString "<")])
    OLte -> prPrec i 0 (concatD [doc (showString "<=")])
    OGt -> prPrec i 0 (concatD [doc (showString ">")])
    OGte -> prPrec i 0 (concatD [doc (showString ">=")])

instance Print Pat where
  prt i e = case e of
    ConPat con pats -> prPrec i 0 (concatD [prt 0 con, prt 1 pats])
    VarPat var -> prPrec i 1 (concatD [prt 0 var])
    LitPat literal -> prPrec i 1 (concatD [prt 0 literal])
    WildCard -> prPrec i 1 (concatD [doc (showString "_")])
    TuplePat pat pats -> prPrec i 1 (concatD [doc (showString "("), prt 0 pat, doc (showString ","), prt 0 pats, doc (showString ")")])
    ListPat pats -> prPrec i 1 (concatD [doc (showString "["), prt 0 pats, doc (showString "]")])
  prtList 1 [] = (concatD [])
  prtList 1 (x:xs) = (concatD [prt 1 x, prt 1 xs])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Literal where
  prt i e = case e of
    IntLit n -> prPrec i 0 (concatD [prt 0 n])
    DoubleLit d -> prPrec i 0 (concatD [prt 0 d])
    CharLit c -> prPrec i 0 (concatD [prt 0 c])
    StringLit str -> prPrec i 0 (concatD [prt 0 str])


