main :: Int;
-- main = let {
--   x :: List;
--   x = map mapper l;
-- } in head (x) end;
main = case map (\h :: (Int -> Int). h 37 end) l2 of {
  Cons a l -> a;
  Nil -> -1
};

-- mapper :: (Int -> Int) -> Int;
-- mapper = \h :: (Int -> Int). h 37 end;

data List = Nil | Cons Int List;
data FunList = FNil | FCons (Int -> Int) FunList;

-- a :: Int;
-- a = 4;
id :: Int -> Int;
id = \x :: Int. x end;
-- pid :: Int -> Int -> Int;
-- pid = \x :: Int, y :: Int. y end;
-- const :: Int -> Int -> Int;
-- const = \x :: Int, y :: Int. x end;
--
--
--
-- l :: FunList;
-- l = FCons (\x::Int.x + 3 end) (FCons id (FCons (const a) FNil));

l2 :: FunList;
l2 = FCons (id) FNil;


-- equal :: FunList -> FunList -> Bool;
-- equal = \l1 :: FunList, l2 :: FunList. case (l1, l2) of {
--   (FNil, FNil) -> True;
--   (_, _) -> False
-- } end;
--
-- not :: Bool -> Bool;
-- not = \b :: Bool. case b of {
--   True -> False;
--   False -> True
-- } end;

map :: ((Int -> Int) -> Int) -> FunList -> List;
map = \f :: ((Int -> Int) -> Int), l :: FunList. case l of {
  FNil -> Nil;
  FCons g gs -> Cons (f g) (map f gs)
} end;
