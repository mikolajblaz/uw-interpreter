---- MB Language Context-Free Grammar ----

-- Author: Mikołaj Błaż

-- Based on Haskell grammar available in "The Haskell 98 Report"
-- (https://www.haskell.org/onlinereport/syntax-iso.html)


---- Top constructs ----

Body.        Body ::= [TopDecl] ;

Data.        TopDecl ::= "data" TyConstr "=" [Constr] ;
Decl.        TopDecl ::= Decl ;

separator TopDecl ";" ;
separator Decl ";" ;
separator nonempty Constr "|" ;

Signature.   Decl ::= Var "::" Type ;                   --- signature declaration
FunDecl.     Decl ::= FunLhs "=" Exp ;                  --- function declaration
PatDecl.     Decl ::= Pat "=" Exp ;                     --- pattern declaration

ZeroArgFun.  FunLhs ::= Var ;
ManyArgFun.  FunLhs ::= Var [APat] ;



---- Types ----

DataTyCon.   TyConstr	::=	TyCon [TyVar] ;
DataCon.     Constr ::= Con [AType] ;

separator TyVar "" ;
separator AType "" ;


BType.       Type ::= BType ;
FunBType.    Type ::= BType "->" Type ;                 --- function type

AType.       BType ::= AType ;
AppAType.    BType ::= BType AType ;                    --- type application

GTyCon.      AType ::= GTyCon ;
TyVar.       AType ::= TyVar ;
TupleType.   AType ::= "(" Type "," [Type] ")" ;        --- tuple type
ListType.    AType ::= "[" Type "]"	;                   --- list type
ParenType.   AType ::= "(" Type ")" ;                   --- parenthesized constructor

separator nonempty Type "," ;

SimpleTyCon. GTyCon ::= TyCon ;
UnitTyCon.   GTyCon ::= "()" ;                          --- unit constructor
ListTyCon.   GTyCon ::= "[]" ;                          --- list constructor
FunTyCon.    GTyCon ::= "(->)" ;                        --- function constructor
TupleTyCon.  GTyCon ::= "(" [Comma] ")" ;               --- tuple constructor



---- Expressions ----

Lambda.      Exp5 ::= "\\" [APat] "->" Exp ;            --- lambda abstraction
Let.         Exp5 ::= "let" [Decl] "in" Exp	;           --- let expression
If.          Exp5 ::= "if" Exp "then" Exp "else" Exp ;  --- conditional
Case.        Exp5 ::= "case" Exp "of" "{" [Alt] "}" ;   --- case expression
FExp.        Exp5 ::= FExp ;

FApp.        FExp	::= FExp AExp ;                       --- function application
AExp.        FExp	::= AExp ;

VarExp.      AExp ::= Var	;                             --- variable
GConExp.     AExp ::= GCon ;                            --- general constructor
LitExp.      AExp ::= Literal ;
ParExp.      AExp ::= "(" Exp ")" ;                     --- parenthesized expression
TupleExp.    AExp ::= "(" Exp "," [Exp] ")" ;           --- tuple
ListExp.     AExp ::= "[" [Exp] "]" ;                   --- list

Alt.         Alt ::= Pat "->" Exp ;

separator nonempty Exp "," ;
separator Alt ";" ;

_.           Exp  ::= Exp0 ;
_.           Exp0 ::= Exp1 ;
_.           Exp1 ::= Exp2 ;
_.           Exp2 ::= Exp3 ;
_.           Exp3 ::= Exp4 ;
_.           Exp4 ::= Exp5 ;



---- Operators ----
-- right-associative
OOr.         Exp0 ::= Exp1 "||" Exp0 ;
OAnd.        Exp1 ::= Exp2 "&&" Exp1 ;

-- non-associative
EOpE.        Exp2 ::= Exp3 CompOp Exp3 ;

-- left-associative
OAdd.        Exp3 ::= Exp3 "+" Exp4 ;
OSub.        Exp3 ::= Exp3 "-" Exp4 ;

OTimes.      Exp4 ::= Exp4 "*" Exp5 ;
ODiv.        Exp4 ::= Exp4 "/" Exp5 ;

-- comparison operators
OEq.         CompOp ::= "==" ;
ONeq.        CompOp ::= "/=" ;
OLt.         CompOp ::= "<" ;
OLte.        CompOp ::= "<=" ;
OGt.         CompOp ::= ">" ;
OGte.        CompOp ::= ">=" ;



---- Patterns ----

separator nonempty APat "" ;

APat.        Pat ::= APat ;
ManyGConPat. Pat ::= GCon [APat] ;                      --- arity gcon > 0

VarPat.      APat ::= Var ;
ZeroGConPat. APat ::= GCon ;                            --- arity gcon = 0
LitPat.      APat ::= Literal ;
WildCard.    APat ::= "_" ;
ParPat.      APat ::= "(" Pat ")" ;                     --- parenthesized pattern
TuplePat.    APat ::= "(" Pat "," [Pat] ")"	;           --- tuple
ListPat.     APat ::= "[" [Pat] "]" ;                   --- list

separator nonempty Pat "," ;

SimpleCon.   GCon ::= Con ;
UnitCon.     GCon ::= "()" ;
ListCon.     GCon ::= "[]" ;
TupleCon.    GCon ::= "(" [Comma] ")" ;

Comma.       Comma ::= "," ;
separator nonempty Comma "" ;



---- Lexical syntax ----
token Var (lower ( letter | digit )* ) ;
token Con (upper ( letter | digit )* ) ;

ConTyCon.    TyCon ::= Con ;
VarTyVar.    TyVar ::= Var ;

IntLit.      Literal ::= Integer ;
DoubleLit.   Literal ::= Double ;
CharLit.     Literal ::= Char ;
StringLit.   Literal ::= String ;

---- Comments ----
comment "--" ;
