-- Przykładowy plik w języku MB prezentujący możliwe konstrukcje

-- Typy algebraiczne
data TakNie = Tak | Nie;

-- ... polimorficzne i rekurencyjne
data Tree a = Empty | Node a (Tree a) (Tree a);

-- Arytmetyka
a = 4;
b = (0, 0);
z = if 3 < 5 then a * 3 + 2 - 4 / (5 - 0) else case b of {
  (1, 1) -> 9;
  (k, 0) -> k;
  _ -> let b = 10 in b;
};

-- Funkcje 0-argumentowe
x :: Int;
x = 7;
y = True;

-- Rekurencja
factorial :: Int -> Int;
factorial 0 = 1;
factorial n = n * factorial (n - 1);

-- Rekonstrukcja typów
nie Tak = Nie;
-- Wtedy błąd powoduje np.:
-- nie Nie = 42

-- Either, Maybe
or :: Either a (Maybe b) -> Bool;
or (Left _) = True;
or (Right Nothing) = False;
or _ = True;

-- Listy
-- data List a = Nil | Cons a (List a)
-- Lukier syntaktyczny: List a == [a], Nil == []
-- konstrukcja tablic przez: [_,_,_,...]
head :: [a] -> a;
head (Cons x _) = x;
oneInt = head [1, 2, 3, 4];

-- Pattern matching + polimorfizm + krotki
fst :: (a, b) -> a;
fst (x, _) = x;

-- Pattern matching wielopoziomowy
sumTuple :: (Maybe Int, Tree Int) -> Maybe Int;
sumTuple (Nothing, _)  = Nothing;
sumTuple (_, Empty) = Nothing;
sumTuple (Just a, Node b _ _) = Just (a + b);

-- Funkcje wyższego rzędu
map :: (a -> b) -> [a] -> [b];
map f [] = [];
map f (Cons x xs) = Cons (f x) (map f xs);

const :: a -> b -> a;
const x _ = x;
-- Częściowa aplikacja, res = [4, 4, 4]
res = map (const 3) [1, 2, 3];
one :: b -> Int;
one = const 1;

-- Listy funkcji + funkcje anonimowe
lf :: [Int -> Int];
lf = [\x -> x, \_ -> 3, \x -> 2 * x + 1];

-- Statyczne wiązanie
st = 2;
f1 x = x + st;
f2 st = f1 (st + st);
-- f2 100 = 202
